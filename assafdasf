#!/usr/bin/env python3
import rclpy
from rclpy.node import Node

import depthai as dai  
import cv2
import numpy as np

from sensor_msgs.msg import Image


class H_Cam_Node(Node):

    def __init__(self):
        super().__init__('h_cam')
        self.publisher_ = self.create_publisher(Image, 'color/image', 1)
        timer_period = 0.1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)

        # Create pipeline
        self.pipeline = dai.Pipeline()

        # Define source and output
        self.camRgb = self.pipeline.create(dai.node.ColorCamera)
        self.xoutVideo = self.pipeline.create(dai.node.XLinkOut)

        self.xoutVideo.setStreamName("video")

        # Properties
        self.width = 640
        self.height = 480
        self.camRgb.setBoardSocket(dai.CameraBoardSocket.RGB)
        self.camRgb.setResolution(dai.ColorCameraProperties.SensorResolution.THE_1080_P)
        self.camRgb.setVideoSize(self.width, self.height)

        self.xoutVideo.input.setBlocking(False)
        self.xoutVideo.input.setQueueSize(30)

        # Linking
        self.camRgb.video.link(self.xoutVideo.input)

        # Connect to device and start pipeline
        self.device = dai.Device(self.pipeline)

        self.video = self.device.getOutputQueue(name="video", maxSize=1, blocking=False)

                
    def timer_callback(self):
        # get new frame
        videoIn = self.video.get()
        frame = videoIn.getCvFrame()

        # format image
        frame = np.reshape(frame, (self.height, self.width * 3))
        frame = frame.flatten()
        print(frame.dtype)
        print(frame.shape)
        print(frame)

        msg = Image()
        msg.width = self.width
        msg.height = self.height
        msg.encoding = "bgr8"
        msg.is_bigendian = 0
        step = self.width * 3
        msg.data = frame.tolist()
        # msg.data = 'Hello World: %d
        self.publisher_.publish(msg)
        # self.get_logger().info('Publishing: "%s"' % msg.data)


def main(args=None):
    rclpy.init(args=args)

    minimal_publisher = H_Cam_Node()

    rclpy.spin(minimal_publisher)

    minimal_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()